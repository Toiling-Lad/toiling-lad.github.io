var _user$project$Carousel$fromList = F2(
	function (needle, list) {
		var recurse = F3(
			function (remainingRounds, needle, list) {
				recurse:
				while (true) {
					if (_elm_lang$core$Native_Utils.cmp(remainingRounds, 0) < 1) {
						return _elm_lang$core$Result$Err('not found');
					} else {
						var _p0 = list;
						if (_p0.ctor === '[]') {
							return _elm_lang$core$Result$Err('list was too short');
						} else {
							if (_p0._1.ctor === '[]') {
								return _elm_lang$core$Result$Err('list was too short');
							} else {
								if (_p0._1._1.ctor === '[]') {
									return _elm_lang$core$Result$Err('list was too short');
								} else {
									var _p4 = _p0._1._1._1;
									var _p3 = _p0._0;
									var _p2 = _p0._1._1._0;
									var _p1 = _p0._1._0;
									if (_elm_lang$core$Native_Utils.eq(_p1, needle)) {
										return _elm_lang$core$Result$Ok(
											{previous: _p3, current: _p1, next: _p2, rest: _p4});
									} else {
										var _v1 = remainingRounds - 1,
											_v2 = needle,
											_v3 = {
											ctor: '::',
											_0: _p1,
											_1: {
												ctor: '::',
												_0: _p2,
												_1: A2(
													_elm_lang$core$Basics_ops['++'],
													_p4,
													{
														ctor: '::',
														_0: _p3,
														_1: {ctor: '[]'}
													})
											}
										};
										remainingRounds = _v1;
										needle = _v2;
										list = _v3;
										continue recurse;
									}
								}
							}
						}
					}
				}
			});
		var length = _elm_lang$core$List$length(list);
		return A3(recurse, length, needle, list);
	});
var _user$project$Carousel$backwards = function (_p5) {
	var _p6 = _p5;
	var _p9 = _p6.rest;
	var _p8 = _p6.next;
	var newRest = function () {
		var _p7 = _elm_lang$core$List$reverse(_p9);
		if (_p7.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p8,
				_1: _elm_lang$core$List$reverse(_p7._1)
			};
		}
	}();
	var newPrevious = A2(
		_elm_lang$core$Maybe$withDefault,
		_p8,
		_elm_lang$core$List$head(
			_elm_lang$core$List$reverse(_p9)));
	return {previous: newPrevious, current: _p6.previous, next: _p6.current, rest: newRest};
};
var _user$project$Carousel$onwards = function (_p10) {
	var _p11 = _p10;
	var _p14 = _p11.rest;
	var _p13 = _p11.previous;
	var newRest = function () {
		var _p12 = _p14;
		if (_p12.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p12._1,
				{
					ctor: '::',
					_0: _p13,
					_1: {ctor: '[]'}
				});
		}
	}();
	var newNext = A2(
		_elm_lang$core$Maybe$withDefault,
		_p13,
		_elm_lang$core$List$head(_p14));
	return {previous: _p11.current, current: _p11.next, next: newNext, rest: newRest};
};
var _user$project$Carousel$Carousel = F4(
	function (a, b, c, d) {
		return {previous: a, current: b, next: c, rest: d};
	});
