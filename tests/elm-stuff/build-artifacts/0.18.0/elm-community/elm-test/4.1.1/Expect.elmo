var _elm_community$elm_test$Expect$reportCollectionFailure = F5(
	function (comparison, expected, actual, missingKeys, extraKeys) {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: comparison,
				reason: _elm_community$elm_test$Test_Expectation$CollectionDiff(
					{
						expected: _elm_lang$core$Basics$toString(expected),
						actual: _elm_lang$core$Basics$toString(actual),
						extra: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, extraKeys),
						missing: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, missingKeys)
					})
			});
	});
var _elm_community$elm_test$Expect$reportFailure = F3(
	function (comparison, expected, actual) {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: comparison,
				reason: A2(
					_elm_community$elm_test$Test_Expectation$Comparison,
					_elm_lang$core$Basics$toString(expected),
					_elm_lang$core$Basics$toString(actual))
			});
	});
var _elm_community$elm_test$Expect$onFail = F2(
	function (str, expectation) {
		var _p0 = expectation;
		if (_p0.ctor === 'Pass') {
			return expectation;
		} else {
			return _elm_community$elm_test$Test_Expectation$Fail(
				_elm_lang$core$Native_Utils.update(
					_p0._0,
					{description: str, reason: _elm_community$elm_test$Test_Expectation$Custom}));
		}
	});
var _elm_community$elm_test$Expect$fail = function (str) {
	return _elm_community$elm_test$Test_Expectation$fail(
		{description: str, reason: _elm_community$elm_test$Test_Expectation$Custom});
};
var _elm_community$elm_test$Expect$pass = _elm_community$elm_test$Test_Expectation$Pass;
var _elm_community$elm_test$Expect$allHelp = F2(
	function (list, query) {
		allHelp:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return _elm_community$elm_test$Expect$pass;
			} else {
				var _p2 = _p1._0(query);
				if (_p2.ctor === 'Pass') {
					var _v3 = _p1._1,
						_v4 = query;
					list = _v3;
					query = _v4;
					continue allHelp;
				} else {
					return _p2;
				}
			}
		}
	});
var _elm_community$elm_test$Expect$all = F2(
	function (list, query) {
		return _elm_lang$core$List$isEmpty(list) ? _elm_community$elm_test$Test_Expectation$fail(
			{
				reason: _elm_community$elm_test$Test_Expectation$Invalid(_elm_community$elm_test$Test_Expectation$EmptyList),
				description: 'Expect.all was given an empty list. You must make at least one expectation to have a valid test!'
			}) : A2(_elm_community$elm_test$Expect$allHelp, list, query);
	});
var _elm_community$elm_test$Expect$testWith = F5(
	function (makeReason, label, runTest, expected, actual) {
		return A2(runTest, actual, expected) ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Test_Expectation$fail(
			{
				description: label,
				reason: A2(
					makeReason,
					_elm_lang$core$Basics$toString(expected),
					_elm_lang$core$Basics$toString(actual))
			});
	});
var _elm_community$elm_test$Expect$equateWith = _elm_community$elm_test$Expect$testWith(_elm_community$elm_test$Test_Expectation$Equals);
var _elm_community$elm_test$Expect$compareWith = _elm_community$elm_test$Expect$testWith(_elm_community$elm_test$Test_Expectation$Comparison);
var _elm_community$elm_test$Expect$equalSets = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Set$toList(expected),
			_elm_lang$core$Set$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var extraKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, actual, expected));
			var missingKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, expected, actual));
			return A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalSets', expected, actual, missingKeys, extraKeys);
		}
	});
var _elm_community$elm_test$Expect$equalDicts = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Dict$toList(expected),
			_elm_lang$core$Dict$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var differ = F4(
				function (dict, k, v, diffs) {
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Dict$get, k, dict),
						_elm_lang$core$Maybe$Just(v)) ? diffs : {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: k, _1: v},
						_1: diffs
					};
				});
			var missingKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(actual),
				{ctor: '[]'},
				expected);
			var extraKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(expected),
				{ctor: '[]'},
				actual);
			return A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalDicts', expected, actual, missingKeys, extraKeys);
		}
	});
var _elm_community$elm_test$Expect$equalLists = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(expected, actual)) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var result = A2(
				_elm_lang$core$Maybe$map,
				function (_p3) {
					var _p4 = _p3;
					var reason = A3(
						_elm_community$elm_test$Test_Expectation$ListDiff,
						_elm_lang$core$Basics$toString(expected),
						_elm_lang$core$Basics$toString(actual),
						{
							ctor: '_Tuple3',
							_0: _p4._0,
							_1: _elm_lang$core$Basics$toString(_p4._1),
							_2: _elm_lang$core$Basics$toString(_p4._2)
						});
					return _elm_community$elm_test$Test_Expectation$fail(
						{description: 'Expect.equalLists', reason: reason});
				},
				_elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filterMap,
						function (_p5) {
							var _p6 = _p5;
							var _p8 = _p6._1._0;
							var _p7 = _p6._1._1;
							return _elm_lang$core$Native_Utils.eq(_p8, _p7) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple3', _0: _p6._0, _1: _p8, _2: _p7});
						},
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							A3(
								_elm_lang$core$List$map2,
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									}),
								expected,
								actual)))));
			var _p9 = result;
			if (_p9.ctor === 'Just') {
				return _p9._0;
			} else {
				var _p10 = A2(
					_elm_lang$core$Basics$compare,
					_elm_lang$core$List$length(actual),
					_elm_lang$core$List$length(expected));
				switch (_p10.ctor) {
					case 'GT':
						return A3(
							_elm_community$elm_test$Expect$reportFailure,
							'Expect.equalLists was longer than',
							_elm_lang$core$Basics$toString(expected),
							_elm_lang$core$Basics$toString(actual));
					case 'LT':
						return A3(
							_elm_community$elm_test$Expect$reportFailure,
							'Expect.equalLists was shorter than',
							_elm_lang$core$Basics$toString(expected),
							_elm_lang$core$Basics$toString(actual));
					default:
						return _elm_community$elm_test$Expect$pass;
				}
			}
		}
	});
var _elm_community$elm_test$Expect$err = function (result) {
	var _p11 = result;
	if (_p11.ctor === 'Ok') {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: 'Expect.err',
				reason: A2(
					_elm_community$elm_test$Test_Expectation$Comparison,
					'Err _',
					_elm_lang$core$Basics$toString(result))
			});
	} else {
		return _elm_community$elm_test$Expect$pass;
	}
};
var _elm_community$elm_test$Expect$false = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$fail(message) : _elm_community$elm_test$Expect$pass;
	});
var _elm_community$elm_test$Expect$true = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(message);
	});
var _elm_community$elm_test$Expect$atLeast = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atLeast',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > -1;
		}));
var _elm_community$elm_test$Expect$greaterThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.greaterThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
		}));
var _elm_community$elm_test$Expect$atMost = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atMost',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
		}));
var _elm_community$elm_test$Expect$lessThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.lessThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
		}));
var _elm_community$elm_test$Expect$notEqual = A2(
	_elm_community$elm_test$Expect$equateWith,
	'Expect.notEqual',
	F2(
		function (x, y) {
			return !_elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$equal = A2(
	_elm_community$elm_test$Expect$equateWith,
	'Expect.equal',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
