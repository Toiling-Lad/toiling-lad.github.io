var _user$project$Test_Reporter_Json$reportSummary = F2(
	function (_p0, autoFail) {
		var _p1 = _p0;
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('runComplete')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'passed',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(_p1.passed))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failed',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(_p1.failed))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'duration',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Basics$toString(_p1.duration))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'autoFail',
									_1: A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Json_Encode$null,
										A2(_elm_lang$core$Maybe$map, _elm_lang$core$Json_Encode$string, autoFail))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Test_Reporter_Json$encodeLabels = function (labels) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Json_Encode$string,
			_elm_lang$core$List$reverse(labels)));
};
var _user$project$Test_Reporter_Json$getStatus = function (outcome) {
	var _p2 = outcome;
	switch (_p2.ctor) {
		case 'Failed':
			return 'fail';
		case 'Todo':
			return 'todo';
		default:
			return 'pass';
	}
};
var _user$project$Test_Reporter_Json$encodeFailures = function (outcome) {
	var _p3 = outcome;
	switch (_p3.ctor) {
		case 'Failed':
			return A2(_elm_lang$core$List$map, _user$project$Test_Reporter_TestResults$encodeFailure, _p3._0);
		case 'Todo':
			return {
				ctor: '::',
				_0: _elm_lang$core$Json_Encode$string(_p3._0),
				_1: {ctor: '[]'}
			};
		default:
			return {ctor: '[]'};
	}
};
var _user$project$Test_Reporter_Json$reportComplete = function (_p4) {
	var _p5 = _p4;
	var _p6 = _p5.outcome;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'event',
				_1: _elm_lang$core$Json_Encode$string('testCompleted')
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'status',
					_1: _elm_lang$core$Json_Encode$string(
						_user$project$Test_Reporter_Json$getStatus(_p6))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'labels',
						_1: _user$project$Test_Reporter_Json$encodeLabels(_p5.labels)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failures',
							_1: _elm_lang$core$Json_Encode$list(
								_user$project$Test_Reporter_Json$encodeFailures(_p6))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'duration',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Basics$toString(_p5.duration))
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Test_Reporter_Json$reportBegin = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Maybe$Just(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('runStart')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'testCount',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(_p8.testCount))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'fuzzRuns',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(_p8.fuzzRuns))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'paths',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p8.paths))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'initialSeed',
									_1: _elm_lang$core$Json_Encode$string(
										_elm_lang$core$Basics$toString(_p8.initialSeed))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}));
};
