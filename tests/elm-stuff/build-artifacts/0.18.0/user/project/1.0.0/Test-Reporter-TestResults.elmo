var _user$project$Test_Reporter_TestResults$outcomesFromExpectationsHelp = F2(
	function (expectation, builder) {
		var _p0 = _elm_community$elm_test$Test_Runner$getFailure(expectation);
		if (_p0.ctor === 'Just') {
			var _p1 = _p0._0;
			return _elm_community$elm_test$Test_Runner$isTodo(expectation) ? _elm_lang$core$Native_Utils.update(
				builder,
				{
					todos: {ctor: '::', _0: _p1.message, _1: builder.todos}
				}) : _elm_lang$core$Native_Utils.update(
				builder,
				{
					failures: {ctor: '::', _0: _p1, _1: builder.failures}
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				builder,
				{passes: builder.passes + 1});
		}
	});
var _user$project$Test_Reporter_TestResults$isFailure = function (outcome) {
	var _p2 = outcome;
	if (_p2.ctor === 'Failed') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Test_Reporter_TestResults$isTodo = function (outcome) {
	var _p3 = outcome;
	if (_p3.ctor === 'Todo') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Test_Reporter_TestResults$encodeFailure = function (_p4) {
	var _p5 = _p4;
	var _p6 = _p5.message;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'given',
				_1: A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Json_Encode$null,
					A2(_elm_lang$core$Maybe$map, _elm_lang$core$Json_Encode$string, _p5.given))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'message',
					_1: _elm_lang$core$Json_Encode$string(_p6)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'actual',
						_1: _elm_lang$core$Json_Encode$string(_p6)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Test_Reporter_TestResults$encodeOutcome = function (outcome) {
	var _p7 = outcome;
	switch (_p7.ctor) {
		case 'Passed':
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('PASS')
					},
					_1: {ctor: '[]'}
				});
		case 'Failed':
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('FAIL')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failures',
							_1: _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _user$project$Test_Reporter_TestResults$encodeFailure, _p7._0))
						},
						_1: {ctor: '[]'}
					}
				});
		default:
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('TODO')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'message',
							_1: _elm_lang$core$Json_Encode$string(_p7._0)
						},
						_1: {ctor: '[]'}
					}
				});
	}
};
var _user$project$Test_Reporter_TestResults$TestResult = F3(
	function (a, b, c) {
		return {labels: a, outcome: b, duration: c};
	});
var _user$project$Test_Reporter_TestResults$SummaryInfo = F5(
	function (a, b, c, d, e) {
		return {testCount: a, passed: b, failed: c, todos: d, duration: e};
	});
var _user$project$Test_Reporter_TestResults$Failure = F2(
	function (a, b) {
		return {given: a, message: b};
	});
var _user$project$Test_Reporter_TestResults$failureDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Test_Reporter_TestResults$Failure,
	A2(
		_elm_lang$core$Json_Decode$field,
		'given',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string));
var _user$project$Test_Reporter_TestResults$OutcomeBuilder = F3(
	function (a, b, c) {
		return {passes: a, todos: b, failures: c};
	});
var _user$project$Test_Reporter_TestResults$Failed = function (a) {
	return {ctor: 'Failed', _0: a};
};
var _user$project$Test_Reporter_TestResults$Todo = function (a) {
	return {ctor: 'Todo', _0: a};
};
var _user$project$Test_Reporter_TestResults$Passed = {ctor: 'Passed'};
var _user$project$Test_Reporter_TestResults$outcomesFromExpectations = function (expectations) {
	var _p8 = expectations;
	if (_p8.ctor === '::') {
		if (_p8._1.ctor === '[]') {
			var _p11 = _p8._0;
			var _p9 = _elm_community$elm_test$Test_Runner$getFailure(_p11);
			if (_p9.ctor === 'Nothing') {
				return {
					ctor: '::',
					_0: _user$project$Test_Reporter_TestResults$Passed,
					_1: {ctor: '[]'}
				};
			} else {
				var _p10 = _p9._0;
				return _elm_community$elm_test$Test_Runner$isTodo(_p11) ? {
					ctor: '::',
					_0: _user$project$Test_Reporter_TestResults$Todo(_p10.message),
					_1: {ctor: '[]'}
				} : {
					ctor: '::',
					_0: _user$project$Test_Reporter_TestResults$Failed(
						{
							ctor: '::',
							_0: _p10,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			}
		} else {
			var builder = A3(
				_elm_lang$core$List$foldl,
				_user$project$Test_Reporter_TestResults$outcomesFromExpectationsHelp,
				{
					passes: 0,
					todos: {ctor: '[]'},
					failures: {ctor: '[]'}
				},
				expectations);
			var failuresList = function () {
				var _p12 = builder.failures;
				if (_p12.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					return {
						ctor: '::',
						_0: _user$project$Test_Reporter_TestResults$Failed(_p12),
						_1: {ctor: '[]'}
					};
				}
			}();
			return _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: A2(_elm_lang$core$List$repeat, builder.passes, _user$project$Test_Reporter_TestResults$Passed),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$List$map, _user$project$Test_Reporter_TestResults$Todo, builder.todos),
						_1: {
							ctor: '::',
							_0: failuresList,
							_1: {ctor: '[]'}
						}
					}
				});
		}
	} else {
		return {ctor: '[]'};
	}
};
